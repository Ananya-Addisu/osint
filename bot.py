import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from data import config
from utils import logger
import os
import json
import logging
from telethon import TelegramClient
import time
from pathlib import Path
from datetime import datetime, timedelta
import asyncio
from aiogram.dispatcher.filters.state import State, StatesGroup

session_dir = "sessions"
TOKEN = config.bot_token
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
active_processes = []
ADMIN_IDS = [6582382945]

class UserStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_chat_id = State()

with open('data/allowed_users.json', 'r') as f:
    data = json.load(f)
    allowed_user_ids = data['allowed_ids']

async def run_python_file(message: types.Message, state: FSMContext):
    global active_processes
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
        if not active_processes:
            process = subprocess.Popen(['python', 'utils/main.py'])
            active_processes.append(process)
            await message.edit_text("‚úÖ–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–Ω–µ—Ç", reply_markup=keyboard)
        else:
            await message.edit_text("‚ùå–ë–æ—Ç–Ω–µ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–Ω–µ—Ç–∞: {e}")
        await message.edit_text(f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–Ω–µ—Ç–∞: {e}", reply_markup=keyboard)


async def stop_processes(message: types.Message, state: FSMContext):
    global active_processes
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
        if active_processes:
            while active_processes:
                process = active_processes.pop()
                if process.poll() is None:
                    process.terminate()
                    process.wait()
                    await message.edit_text("‚úÖ–ë–æ—Ç–Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=keyboard)
                else:
                    await message.edit_text("‚ùå–±–æ—Ç–Ω–µ—Ç –∏ —Ç–∞–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω", reply_markup=keyboard)
        else:
            await message.edit_text("‚ùå–ë–æ—Ç–Ω–µ—Ç –∏ —Ç–∞–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω.", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–Ω–µ—Ç–∞: {e}")
        await message.edit_text(f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–Ω–µ—Ç–∞: {e}", reply_markup=keyboard)


async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in allowed_user_ids:
        with open("data/vid.mp4", "rb") as video:
            await message.answer_video(video, caption="–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –µ–≥–æ —É @ZXC_CEHOKOC\n\n–ü—Ä–∞–π—Å:\n–ù–µ–¥–µ–ª—è - 5$\n–ú–µ—Å—è—Ü - 10$\n–ù–∞–≤—Å–µ–≥–¥–∞ - 20$", parse_mode="HTML")
        return
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–í–∫–ª –±–æ—Ç–Ω–µ—Ç", callback_data="start"),
            types.InlineKeyboardButton("–û—Ç–∫–ª –±–æ—Ç–Ω–µ—Ç", callback_data="stop"),
        types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="update_text"),
        types.InlineKeyboardButton("–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å", callback_data="show_text")
    )
        sessions_dir = Path("sessions")
        session_files = list(sessions_dir.glob("*.session"))
        session_names = [file.stem for file in session_files]
        count_s = len(session_names)
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Å—Å–∏–π: {count_s}")

        account_text = "–∞–∫–∫–∞—É–Ω—Ç"
        if count_s != 1:
            account_text = "–∞–∫–∫–∞—É–Ω—Ç–∞" if count_s < 5 else "–∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            
        await message.answer(f"üì±\n‚îúSnk BotNet:\n‚îî–í –±–æ—Ç–µ {count_s} {account_text}", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
async def backing(message: types.Message):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("–í–∫–ª –±–æ—Ç–Ω–µ—Ç", callback_data="start"),
            types.InlineKeyboardButton("–û—Ç–∫–ª –±–æ—Ç–Ω–µ—Ç", callback_data="stop"),
            types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="update_text"),
            types.InlineKeyboardButton("–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å", callback_data="show_text")
        )

        sessions_dir = Path("sessions")
        session_files = list(sessions_dir.glob("*.session"))
        session_names = [file.stem for file in session_files]
        count_s = len(session_names)
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Å—Å–∏–π: {count_s}")

        account_text = "–∞–∫–∫–∞—É–Ω—Ç"
        if count_s != 1:
            account_text = "–∞–∫–∫–∞—É–Ω—Ç–∞" if count_s < 5 else "–∞–∫–∫–∞—É–Ω—Ç–æ–≤"

        msg = await message.edit_text(
            f"üì±\n‚îúSnk BotNet:\n‚îî–í –±–æ—Ç–µ {count_s} {account_text}",
            reply_markup=keyboard
        )

        message_id = msg.message_id

    except Exception as e:
        logger.error(f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.edit_text(f"‚ö†–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", reply_markup=keyboard)


async def button_click(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        if callback_query.data == "start":
            await run_python_file(callback_query.message, state)
        elif callback_query.data == "stop":
            await stop_processes(callback_query.message, state)
        elif callback_query.data == "update_text":
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
            await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", reply_markup=keyboard)
            await state.set_state(UserStates.waiting_for_text.state)
        elif callback_query.data == "show_text":
            await show_current_text(callback_query.message, state)
        elif callback_query.data == "back":
            await backing(callback_query.message)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")
        await callback_query.message.answer(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")


async def show_current_text(message: types.Message, state: FSMContext):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
        with open("data/text.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            text = data["text"]
        await message.edit_text(f"–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:\n\n{text}", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.edit_text(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}", reply_markup=keyboard)


async def text_handler(message: types.Message, state: FSMContext):
    try:
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
        types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))
        if await state.get_state() == UserStates.waiting_for_text.state:
            new_text = message.text
            with open("data/text.json", "w") as f:
                json.dump({"text": new_text}, f)
            await message.answer(f"üì∞–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –±–æ—Ç–Ω–µ—Ç–∞: {new_text}", reply_markup=keyboard)
            await state.finish()
        elif await state.get_state() == UserStates.waiting_for_chat_id.state:
            await save_chat_id(message, state)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.edit_text(f"‚ö†Ô∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}", reply_markup=keyboard)

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, CommandStart())
    dp.register_callback_query_handler(button_click, state="*")
    dp.register_message_handler(text_handler, state=UserStates.waiting_for_text)
    dp.register_message_handler(text_handler, state=UserStates.waiting_for_chat_id)

async def main():
    register_handlers(dp)
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())