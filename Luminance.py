#—Å–ø–∏–∑–¥–∏—à—å –∫–æ–¥ –≤—Å–µ 32 –≤ —Ä—è–¥ –≤—ã–ª–µ—Ç—è—Ç
while True:
    try:

        import sys
        import os
        import time
        import subprocess
        import webbrowser

        RESET = "\033[0m"
        GREEN_TEXT = "\033[32m"
        BLACK_BG = "\033[40m"

        required_modules = [
            "pystyle",
            "urllib3",
            "beautifulsoup4",
            "phonenumbers",
            "faker",
            "python-whois",
            "requests"
        ]


        def clear_console():
            os.system('cls' if os.name == 'nt' else 'clear')


        def print_with_delay(text, delay=0.1):
            for char in text:
                print(char, end='', flush=True)
                time.sleep(delay)
            print()


        def install(package):
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])


        def install_modules():
            print_with_delay(
                GREEN_TEXT + "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Ç–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Luminance Repack.\n–°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–≤–µ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã.\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∑–∞–π–º–µ—Ç –±–æ–ª–µ–µ 3—Ö –º–∏–Ω—É—Ç.\n3\n2\n1\n" + RESET)
            for module in required_modules:
                try:
                    __import__(module)
                    print(GREEN_TEXT + f"{module} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                except ImportError:
                    print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {module}...")
                    install(module)
                    print_with_delay(GREEN_TEXT + f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–¥—É–ª—å {module}" + RESET)

            print_with_delay(GREEN_TEXT + "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É Luminance Repack..." + RESET)
            time.sleep(4)
            os.system('cls' if os.name == 'nt' else 'clear')
    except EOFError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    import urllib
    import bs4
    import faker
    from pystyle import Anime, Colors, Colorate, Box, Write, Center
    import whois
    import string
    import platform
    import requests
    import pystyle
    import os
    import time
    import random
    import socket
    import urllib3

    urllib3.disable_warnings()

    def getwebsiteinfo(website):
            whoisdata = whois.whois(website)
            info = f"""
      |–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–π—Ç–µ: 
      |–î–æ–º–µ–Ω: {whoisdata.domainname}
      |–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {whoisdata.creationdate}
      |–ò—Å—Ç–µ–∫–∞–µ—Ç: {whoisdata.expirationdate}  
      |–í–ª–∞–¥–µ–ª–µ—Ü: {whoisdata.registrantname}
      |–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {whoisdata.registrantorganization}
      |–ê–¥—Ä–µ—Å: {whoisdata.registrantaddress}
      |–ì–æ—Ä–æ–¥: {whoisdata.registrantcity}
      |–®—Ç–∞—Ç: {whoisdata.registrantstate}
      |–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {whoisdata.registrantpostalcode}
      |–°—Ç—Ä–∞–Ω–∞: {whoisdata.registrantcountry}
      |IP-–∞–¥—Ä–µ—Å: {whoisdata.nameservers}
        """
            Write.Print(info + "\n", Colors.red_to_yellow, interval=0.005)


    def Search(Data):
        try:
            global last_search_time
            current_time = time.time()
            if current_time - last_search_time < 60:
                pystyle.Write.Print("\n[!] –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º\n", pystyle.Colors.red, interval=0.0001)
                return
            for database, info in requests.post("https://server.leakosint.com/", json={"token":"6652134584:OGYRHDIr", "request":Data, "limit":100, "lang":"ru"}).json()['List'].items():
                if "No results found" in database:
                    pystyle.Write.Print("\n[!] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n", pystyle.Colors.red_to_yellow, interval = 0.0001)
                    break
                pystyle.Write.Print("\n[@] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö -> ", pystyle.Colors.red_to_yellow, interval = 0.0001)
                pystyle.Write.Print(database, pystyle.Colors.white, interval = 0.0001)
                pystyle.Write.Print("\n\n[@] –û–ø–∏—Å–∞–Ω–∏–µ -> ", pystyle.Colors.red_to_yellow, interval = 0.0001)
                pystyle.Write.Print(f"{info['InfoLeak']}\n", pystyle.Colors.white, interval = 0.0001)
                for record in info['Data']:
                    for key, value in record.items():
                        pystyle.Write.Print(f"\n[@] {key} -> ", pystyle.Colors.red_to_yellow, interval = 0.0001)
                        pystyle.Write.Print({value}, pystyle.Colors.white, interval = 0.0001)
                print()
            last_search_time = current_time
        except:
            pystyle.Write.Print("\n[!] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n", pystyle.Colors.red, interval = 0.0001)


    def propen():
        url = "https://t.me/pr0xit"
        system = platform.system()

        if system == "Linux":
            if os.path.exists("/data/data/com.termux/files/usr/bin"):
                os.system(f"am start -a android.intent.action.VIEW -d {url}")
            else:
                webbrowser.open(url)
        elif system == "Windows":
            webbrowser.open(url)
        else:
            print("Unsupported system")
    os.system('cls' if platform.system() == 'Windows' else 'clear')
    install_modules()
    propen()
    os.system('cls' if platform.system() == 'Windows' else 'clear')
    Write.Print(Center.XCenter('''
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù 
    |ùêèùê´ùêûùê¶ùê¢ùêÆùê¶ ùêÑùêùùê¢ùê≠ùê¢ùê®ùêß|                |ùîüùî∂ @thiasoft|
    
                     ‚Üì REPACK BY ‚Üì
             Telegram > https://t.me/pr0xit                          
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë[1] –ü–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–µ   [7] –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ       [13]–ò–Ω—Ñ–∞ –æ —Å–∞–π—Ç–µ            ‚ïë
    ‚ïë                                                                         ‚ïë 
    ‚ïë[2] –ü–æ–∏—Å–∫ –ø–æ –§–ò      [8] –ü–æ–∏—Å–∫ –ø–æ VIN        [14]–°–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å          ‚ïë
    ‚ïë                                                                         ‚ïë
    ‚ïë[3] –ü–æ–∏—Å–∫ –ø–æ –§–ò–û     [9] –ü–æ–∏—Å–∫ –ø–æ Telegram   [15]–ü–æ—Ä—Ç —Å–∫–∞–Ω–µ—Ä             ‚ïë
    ‚ïë                                                                         ‚ïë
    ‚ïë[4] –ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫—É    [10] –ü–æ–∏—Å–∫ –ø–æ Facebook  [16]–°—Ç—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç          ‚ïë
    ‚ïë                                                                         ‚ïë
    ‚ïë[5] –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É  [11] –ü–æ–∏—Å–∫ –ø–æ Instagram [17]–í—ã–¥–∞—Ç—å –ø—Ä–æ–∫—Å–∏           ‚ïë
    ‚ïë                                                                         ‚ïë
    ‚ïë[6] –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–æ–ª—é  [12] –ü–æ–∏—Å–∫ –ø–æ IP        [18]Web-crawler             ‚ïë
    ‚ïë                                                                         ‚ïë
    ‚ïë[19]–ü–æ–∏—Å–∫ –ø–æ MAC-–∞–¥—Ä                         [21]–í—ã–º—ã—à–ª–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å    ‚ïë
    ‚ïë                                                                         ‚ïë
    ‚ïë[22]–í—ã–º—ã—à–ª–µ–Ω–Ω–∞—è–ö–∞—Ä—Ç–∞ [23]–ü–æ–∏—Å–∫ –ø–æ –ë–î         [24]–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª   ‚ïë
    ‚ïë                                                                         ‚ïë    
    ‚ïë               [77] –ò–Ω—Ñ–æ                    [99] –í—ã—Ö–æ–¥                   ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'''), Colors.blue_to_green, interval=0.000001)
    print()
    print()

    while True:
        choice = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ -> ", pystyle.Colors.blue_to_green, interval = 0.005)
        print()
        if choice == "1":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "2":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –§–ò -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "3":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –§–ò–û -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "4":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "5":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "6":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "7":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "8":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ VIN -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "9":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ Telegram ID -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "10":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ Facebook ID -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "11":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ Instagram ID -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "12":
            Data = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ IP -> ", pystyle.Colors.blue_to_green, interval = 0.005)
            Search(Data)
            print()
        if choice == "77":
            pystyle.Write.Print("[$] –í–ª–∞–¥–µ–ª–µ—Ü –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è\n –†–µ–ø–∞–∫ –∫—Ä—è–∫–∞, –≤—ã—Ä–µ–∑–∞–Ω –º—É—Å–æ—Ä, –Ω–µ —Ä–∞–±–æ—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", pystyle.Colors.red, interval = 0.005)
            print()
            print()
        if choice == '13':
            domain = Write.Input("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞: ", Colors.red_to_yellow, interval=0.005)
            getwebsiteinfo(domain)

        if choice == '14':
            def get_characters(strength):
                characters = string.ascii_letters + string.digits
                if strength == "medium":
                    characters += "!@#$%^&*()qwertyuiopasdfghjklzxcvbnm,./;[]–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥—è—á—Å–º–∏—Ç—å"
                elif strength == "high":
                    characters += string.punctuation
                return characters
            def generate_password(length, strength):
                characters = get_characters(strength)
                password = ''.join(random.choice(characters) for i in range(length))
                return password
            password_length = int(Write.Input('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è: ', Colors.red_to_yellow, interval=0.005))
            complexity = Write.Input('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å (low, medium, high): ', Colors.red_to_yellow, interval=0.005)
            complex_password = generate_password(password_length, complexity)
            Write.Print(complex_password + "\n", Colors.red_to_yellow, interval=0.005)

        if choice == '15':
                    pystyle.Write.Print("\n[$] –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: ", pystyle.Colors.red_to_yellow, interval=0.005)
                    pystyle.Write.Print("\n\n[$] 1 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã", pystyle.Colors.red_to_yellow, interval=0.005)
                    pystyle.Write.Print("\n\n[$] 2 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç", pystyle.Colors.red_to_yellow, interval=0.005)
                    mode = pystyle.Write.Input("\n\n[$] –í–∞—à –≤—ã–±–æ—Ä: ", pystyle.Colors.red_to_yellow, interval=0.005)
                    if mode == "1":
                        print()
                        ports = [
                            20,
                            26,
                            28,
                            29,
                            55,
                            53,
                            80,
                            110,
                            443,
                            8080,
                            1111,
                            1388,
                            2222,
                            1020,
                            4040,
                            6035,
                        ]
                        for port in ports:
                            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                            result = sock.connect_ex(("127.0.0.1", port))
                            if result == 0:
                                pystyle.Write.Print(f"[$] –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç", pystyle.Colors.red_to_yellow, interval=0.005)
                            else:
                                pystyle.Write.Print(f"[$] –ü–æ—Ä—Ç {port} –∑–∞–∫—Ä—ã—Ç", pystyle.Colors.red_to_yellow, interval=0.005)
                            sock.close()
                            print()
                    elif mode == "2":
                        port = pystyle.Write.Input("\n[$] –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞: ", pystyle.Colors.red_to_yellow, interval=0.005)
                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        result = sock.connect_ex(("127.0.0.1", int(port)))
                        print()
                        if result == 0:
                            pystyle.Write.Print(f"[$] –ü–æ—Ä—Ç {port} –æ—Ç–∫—Ä—ã—Ç", pystyle.Colors.red_to_yellow, interval=0.005)
                        else:
                            pystyle.Write.Print(f"[$] –ü–æ—Ä—Ç {port} –∑–∞–∫—Ä—ã—Ç", pystyle.Colors.red_to_yellow, interval=0.005)
                        sock.close()
                        print()
                    else:
                        pystyle.Write.Print("\n[$] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º", pystyle.Colors.red_to_yellow, interval=0.005)
                        print()
        if choice == "16":
                    def transform_text(input_text):
                        translit_dict = {
                            "–∞": "@",
                            "–±": "–ë",
                            "–≤": "B",
                            "–≥": "–≥",
                            "–¥": "–¥",
                            "–µ": "–µ",
                            "—ë": "—ë",
                            "–∂": "–∂",
                            "–∑": "3",
                            "–∏": "u",
                            "–π": "–π",
                            "–∫": "K",
                            "–ª": "–ª",
                            "–º": "M",
                            "–Ω": "H",
                            "–æ": "0",
                            "–ø": "–ø",
                            "—Ä": "P",
                            "—Å": "c",
                            "—Ç": "T",
                            "—É": "y",
                            "—Ñ": "—Ñ",
                            "—Ö": "X",
                            "—Ü": "—Ü",
                            "—á": "4",
                            "—à": "—à",
                            "—â": "—â",
                            "—ä": "—ä",
                            "—ã": "—ã",
                            "—å": "—å",
                            "—ç": "—ç",
                            "—é": "—é",
                            "—è": "—è",
                            "–ê": "A",
                            "–ë": "6",
                            "–í": "V",
                            "–ì": "r",
                            "–î": "D",
                            "–ï": "E",
                            "–Å": "–Å",
                            "–ñ": "–ñ",
                            "–ó": "2",
                            "–ò": "I",
                            "–ô": "–ô",
                            "–ö": "K",
                            "–õ": "–õ",
                            "–ú": "M",
                            "–ù": "H",
                            "–û": "O",
                            "–ü": "–ü",
                            "–†": "P",
                            "–°": "C",
                            "–¢": "T",
                            "–£": "Y",
                            "–§": "–§",
                            "–•": "X",
                            "–¶": "–¶",
                            "–ß": "–ß",
                            "–®": "–®",
                            "–©": "–©",
                            "–™": "–™",
                            "–´": "bl",
                            "–¨": "b",
                            "–≠": "–≠",
                            "–Æ": "9Y",
                            "–Ø": "9A",
                        }
                        transformed_text = []
                        for char in input_text:
                            if char in translit_dict:
                                transformed_text.append(translit_dict[char])
                            else:
                                transformed_text.append(char)
                        return "".join(transformed_text)
                    input_text = pystyle.Write.Input("\n[$] –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç -> ", pystyle.Colors.red_to_yellow, interval=0.005)
                    transformed_text = transform_text(input_text)
                    print()
                    pystyle.Write.Print("[$] –†–µ–∑—É–ª—å—Ç–∞—Ç -> " + transformed_text + "\n", pystyle.Colors.red_to_yellow, interval=0.005)

        if choice == "17":
                    def get_proxy():
                        proxy_api_url = "https://api.proxyscrape.com/v2/?request=getproxies&protocol=http&timeout=10000&country=all"

                        try:
                            response = requests.get(proxy_api_url)
                            if response.status_code == 200:
                                proxy_list = response.text.strip().split("\r\n")
                                return proxy_list
                            else:
                                pystyle.Write.Print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ -> {response.status_code}", pystyle.Colors.red_to_yellow, interval=0.005)
                        except Exception as e:
                            pystyle.Write.Print(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ -> {str(e)}", pystyle.Colors.red_to_yellow, interval=0.005)

                        return None

                    proxies = get_proxy()
                    if proxies:
                        pystyle.Write.Print("\n–ü—Ä–æ–∫—Å–∏:\n", pystyle.Colors.red_to_yellow, interval=0.005)
                        for proxy in proxies:
                            pystyle.Write.Print("\n" + proxy, pystyle.Colors.red_to_yellow, interval=0.005)
                        print()
                    else:
                        pystyle.Write.Print("–ü—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", pystyle.Colors.red_to_yellow, interval=0.005)

        if choice == "18":
            start_url = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É -> ", pystyle.Colors.red_to_yellow, interval=0.005)
            max_depth = 2
            visited = set()


            def crawl(url, depth=0):
                if depth > max_depth:
                    return
                parsed = urllib.parse.urlparse(url)
                domain = f"{parsed.scheme}://{parsed.netloc}"
                if url in visited:
                    return
                try:
                    response = requests.get(url)
                    html = response.text
                    soup = bs4.BeautifulSoup(html, "html.parser")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {url}: {e}")
                    return
                visited.add(url)
                pystyle.Write.Print("[$] " + url + "\n", pystyle.Colors.red_to_yellow, interval=0.005)
                for link in soup.find_all("a"):
                    href = link.get("href")
                    if not href:
                        continue
                    href = href.split("#")[0].rstrip("/")
                    if href.startswith("http"):
                        href_parsed = urllib.parse.urlparse(href)
                        if href_parsed.netloc != parsed.netloc:
                            continue
                    else:
                        href = domain + href
                    crawl(href, depth + 1)


            print()
            crawl(start_url)

        if choice == "19":
                    def mac_lookup(mac_address):
                        api_url = f"https://api.macvendors.com/{mac_address}"
                        try:
                            response = requests.get(api_url)
                            if response.status_code == 200:
                                return response.text.strip()
                            else:
                                return f"Error: {response.status_code} - {response.text}"
                        except Exception as e:
                            return f"Error: {str(e)}"
                    mac_address = pystyle.Write.Input("[?] –í–≤–µ–¥–∏—Ç–µ Mac-Address -> ", pystyle.Colors.red_to_yellow, interval = 0.005)
                    vendor = mac_lookup(mac_address)
                    pystyle.Write.Print(f"Vendor: {vendor}", pystyle.Colors.red_to_yellow, interval = 0.005)


        if choice == "21":
            fake = faker.Faker(locale="ru_RU")
            gender = pystyle.Write.Input("\n[$] –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª (–ú - –º—É–∂—Å–∫–æ–π, –ñ - –∂–µ–Ω—Å–∫–∏–π): ", pystyle.Colors.red_to_yellow,
                                         interval=0.005)
            print()

            if gender not in ["–ú", "–ñ"]:
                gender = random.choice(["–ú", "–ñ"])
                pystyle.Write.Print(f"[$] –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º: {gender}\n\n",
                                    pystyle.Colors.red_to_yellow, interval=0.005)

            if gender == "–ú":
                first_name = fake.first_name_male()
                middle_name = fake.middle_name_male()
            else:
                first_name = fake.first_name_female()
                middle_name = fake.middle_name_female()

            last_name = fake.last_name()
            full_name = f"{last_name} {first_name} {middle_name}"
            birthdate = fake.date_of_birth()
            age = fake.random_int(min=18, max=80)
            street_address = fake.street_address()
            city = fake.city()
            region = fake.region()
            postcode = fake.postcode()
            address = f"{street_address}, {city}, {region} {postcode}"
            email = fake.email()
            phone_number = fake.phone_number()
            inn = str(fake.random_number(digits=12, fix_len=True))
            snils = str(fake.random_number(digits=11, fix_len=True))
            passport_num = str(fake.random_number(digits=10, fix_len=True))
            passport_series = fake.random_int(min=1000, max=9999)

            pystyle.Write.Print(f"[$] –§–ò–û: {full_name}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] –ü–æ–ª: {gender}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthdate.strftime('%d %B %Y')}\n", pystyle.Colors.red_to_yellow,
                                interval=0.005)
            pystyle.Write.Print(f"[$] –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] –ê–¥—Ä–µ—Å: {address}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] Email: {email}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] –ò–ù–ù: {inn}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] –°–ù–ò–õ–°: {snils}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print(f"[$] –ü–∞—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏—è: {passport_series} –Ω–æ–º–µ—Ä: {passport_num}\n",
                                pystyle.Colors.red_to_yellow, interval=0.005)

        if choice == "22":
                    pystyle.Write.Print("\n[$] –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:\n", pystyle.Colors.red_to_yellow, interval=0.005)
                    pystyle.Write.Print("[$] 1: –£–∫—Ä–∞–∏–Ω–∞\n", pystyle.Colors.red_to_yellow, interval=0.005)
                    pystyle.Write.Print("[$] 2: –†–æ—Å—Å–∏—è\n", pystyle.Colors.red_to_yellow, interval=0.005)
                    pystyle.Write.Print("[$] 3: –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\n", pystyle.Colors.red_to_yellow, interval=0.005)
                    country_choice = pystyle.Write.Input("\n[?] –í–∞—à –≤—ã–±–æ—Ä: ", pystyle.Colors.red_to_yellow, interval=0.005)

                    if country_choice == "1":
                        country = "–£–∫—Ä–∞–∏–Ω–∞"
                    elif country_choice == "2":
                        country = "–†–æ—Å—Å–∏—è"
                    elif country_choice == "3":
                        country = "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
                    else:
                        pystyle.Write.Print("\n[$] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥.\n", pystyle.Colors.red_to_yellow, interval=0.005)

        if choice == "23":
            query = pystyle.Write.Input("[$] –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: ", pystyle.Colors.red_to_yellow, interval=0.005)
            Search(query)
            print()

        if choice == "24":
            def generate_phone_number(country):
                if country == "–†–æ—Å—Å–∏—è":
                    return "+7" + ''.join([str(random.randint(0, 9)) for _ in range(10)])
                elif country == "–£–∫—Ä–∞–∏–Ω–∞":
                    return "+380" + ''.join([str(random.randint(0, 9)) for _ in range(9)])
                elif country == "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω":
                    return "+7" + ''.join([str(random.randint(0, 9)) for _ in range(10)])
                else:
                    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞"

            pystyle.Write.Print("\n[$] –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print("[$] 1: –†–æ—Å—Å–∏—è\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print("[$] 2: –£–∫—Ä–∞–∏–Ω–∞\n", pystyle.Colors.red_to_yellow, interval=0.005)
            pystyle.Write.Print("[$] 3: –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\n", pystyle.Colors.red_to_yellow, interval=0.005)

            country_choice = pystyle.Write.Input("\n[?] –í–∞—à –≤—ã–±–æ—Ä: ", pystyle.Colors.red_to_yellow, interval=0.005)

            if country_choice == "1":
                country = "–†–æ—Å—Å–∏—è"
            elif country_choice == "2":
                country = "–£–∫—Ä–∞–∏–Ω–∞"
            elif country_choice == "3":
                country = "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"
            else:
                pystyle.Write.Print("\n[$] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥.\n", pystyle.Colors.red_to_yellow, interval=0.005)
                continue

            num_phones = int(pystyle.Write.Input("\n[$] –°–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? ", pystyle.Colors.red_to_yellow, interval=0.005))

            pystyle.Write.Print("\n[$] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞:\n", pystyle.Colors.red_to_yellow, interval=0.005)
            for _ in range(num_phones):
                phone_number = generate_phone_number(country)
                pystyle.Write.Print(f"[$] {phone_number}\n", pystyle.Colors.red_to_yellow, interval=0.005)
            print()

        if choice == "99":
            pystyle.Write.Print("\n[$] –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...\n", pystyle.Colors.red_to_yellow, interval=0.005)
            break