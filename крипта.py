from telethon import TelegramClient, errors, events
import asyncio
import os
from pystyle import Write, Colors
import subprocess
import re

api_id = '21826549'
api_hash = 'c1a19f792cfd9e397200d16c7e448160'

gog = r"""
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£§‚£∂‚£Ñ‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚°í‚£Ç‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚°û‚°≥‚°è‚£≥‚£∂‚°´‚°∑‚¢ó‚°¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£§‚¢ñ‚£õ‚£Ö‚£ó‚£¶‚°†‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚£ô‚†Ω‚¢º‚£∂‚°£‚¢Ω‚¢ß‚°ß‚£≥‚£ü‚°∑‚¢∂‚£¶‚£Ä‚†Ä‚†Ä‚£†‚£æ‚£±‚£≠‚£ß‚£ü‚¢∑‚°ü‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ë‚£Ñ‚†ç‚°ò‚£í‚£ì‚†æ‚¢±‚£¢‚¢º‚£ù‚£æ‚£è‚°ø‚¢è‚£ï‚£é‚£≠‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†¢‚†º‚£Ä‚£≠‚¢±‚°É‚†ú‚£º‚£æ‚£ø‚¢π‚£ª‚£ø‚¢ø‚†ù‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚¢∫‚¢ü‚°ó‚†¥‚£æ‚†ô‚†ï‚£æ‚†ü‚£§‚¢ï‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚¢†‚°§‚†¥‚†í‚¢∂‚£ñ‚£∂‚£∂‚°≤‚†∂‚°¢‚£¢‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ê‚°°‚¢§‚°´‚£≤‚°ß‚†¶‚£É‚°Ø‚£∑‚£ß‚¢õ‚¢∫‚°ë‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£∂‚£ö‚£Ø‚°∑‚†ü‚†©‚°ø‚†Ø‚†ø‚†ø‚†æ‚†õ‚†ì‚£õ‚¢Ø‚£•‚°∑‚£Æ‚°Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ñ‚£æ‚¢û‚£∑‚¢ª‚°ß‚£ü‚†Ø‚¢ô‚°ä‚†Ñ‚†≥‚°ó‚°ß‚¢≥‚£±‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚°ª‚°ø‚£è‚°ü‚¢≠‚£û‚†º‚°´‚†æ‚†ó‚†π‚†π‚†ç‚†ã‚†∏‚†á‚°ü‚°ø‚£∑‚°∑‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£û‚†•‚£´‚£ã‚°©‚¢ñ‚¢ª‚£æ‚†ñ‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†ì‚°ç‚°ª‚£ì‚£ä‚¢á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°î‚°û‚£ü‚£∑‚¢ó‚°£‚°ò‚¢Ç‚†Å‚†Å‚†ê‚†ê‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ã‚¢Ω‚°∑‚†ì‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†û‚°ë‚†ø‚£∂‚°≠‚†µ‚†ì‚†ô‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ç‚†∂‚°∫‚£≥‚¢à‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ó‚£õ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†õ‚°õ‚†õ‚†í‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ñ‚£à‚°ß‚¢§‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ë‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†§‚¢Ñ‚£¥‚°î‚†ö‚°Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†ò‚¢ù‚†µ‚£ø‚£ü‚£∂‚°ö‚†Ω‚£á‚£≥‚£≤‚£∂‚£Ü‚†¶‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚°¥‚†ü‚†ª‚£ø‚°è‚£ª‚†è‚†Ä‚£∞‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚°ó‚†±‚£º‚°ü‚°Å‚†Ä‚¢ò‚£º‚°£‚¢ö‚£Æ‚°ö‚†¥‚†é‚¢æ‚£∫‚£ö‚°ª‚¢∑‚£†‚¢ø‚°µ‚°æ‚£∂‚°≤‚£≤‚£≤‚¢∂‚£≤‚£≤‚£∂‚¢≤‚£∂‚°¥‚†∂‚°≤‚£î‚£ñ‚£≤‚£≤‚£∂‚¢∂‚£æ‚°ü‚°π‚°∫‚†Å‚†Ä‚†Ä‚¢ª‚£ú‚°ù‚†Ä‚°ê‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚†Ä‚†à‚†â‚£Ö‚°Ñ‚†à‚¢Ω‚°∑‚°ü‚†Å‚†Ä‚†Ä‚†à‚°æ‚¢º‚°Ω‚£º‚°ò‚£Ø‚¢ü‚£∑‚†ì‚¢ù‚£Ω‚£î‚¢®‚°º‚£∑‚£è‚°∏‚£•‚¢∑‚£Ω‚£á‚£õ‚£°‚°ø‚¢ø‚£ø‚¢µ‚£ø‚†ø‚£ø‚£≠‚†á‚†Ä‚£†‚†Ä‚†º‚†Å‚†Ä‚°ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚£§‚£∂‚°ã‚°á‚†Ä‚†ò‚†õ‚†Å‚†Ä‚††‚°Ä‚†Ä‚†ò‚£ß‚†Ø‚°∫‚£ø‚°´‚†ä‚†π‚°∂‚°∏‚£á‚°ø‚¢ç‚°ø‚¢π‚£î‚°ª‚£ü‚†ã‚†≥‚°æ‚°ø‚¢ª‚†É‚†Ä‚£ª‚°ø‚†É‚†Ä‚†•‚°ü‚†Ä‚¢†‚£æ‚°ß‚†Ä‚£†‚†ñ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†®‚°º‚°é‚¢∑‚†Ñ‚†Ä‚†Ä‚†Ä‚††‚£ö‚°Ç‚†Ä‚†Ä‚†∏‚°ü‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ø‚°Ω‚†ø‚†Å‚†Ä‚†π‚°ü‚†É‚†Ä‚†Ä‚†ô‚†è‚£ø‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†à‚†Ä‚†Ä‚£ú‚£ø‚°≠‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢≠‚°û‚£á‚†Ä‚¢Ä‚†≤‚°ö‚°µ‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚°ü‚†µ‚¢¶‚†Ñ‚†Ä‚†Ä‚°ª‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ª‚£∑‚°∏‚°ª‚°ó‚£ø‚°á‚†Ä‚†Ä‚¢Ä‚°¶‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£≤‚†ª‚£ä‚°ø‚†ñ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†£‚¢ç‚°ç‚†≠‚°á‚†Ä‚£§‚†ü‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚°Ñ‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°§‚£§‚†Ä‚†Ä‚¢¨‚£û‚£Ö‚£Ä‚°Ä‚¢ø‚°Æ‚†ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚†ß‚£º‚£´‚†©‚£•‚£É‚†Ñ‚†Ä‚†Ñ‚°†‚°ä‚£π‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚¢ê‚£∞‚£ß‚†Ñ‚¢∞‚¢π‚°∫‚°ê‚†∑‚†ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†π‚†Ω‚£Æ‚†è‚†Ñ‚¢Ä‚°é‚°ø‚£Ö‚°ø‚°Æ‚†Ä‚†Ä‚¢†‚£æ‚£∑‚¢∑‚¢ä‚£Ü‚¢è‚°ª‚†∫‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Å‚†∫‚†≠‚¢å‚°¢‚°´‚†ø‚†¶‚†Ä‚£ß‚£ø‚°º‚°º‚†∑‚†Ç‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†â‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä"""

def clear_screen():
    subprocess.call('clear' if os.name == 'posix' else 'cls', shell=True)

async def create_account():
    phone = Write.Input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", Colors.black_to_green, interval=0.0001)
    session_name = f"session_{phone}"
    client = TelegramClient(session_name, api_id, api_hash)
    
    await client.connect()
    if not await client.is_user_authorized():
        await client.send_code_request(phone)
        code = Write.Input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ", Colors.black_to_green, interval=0.0001)
        try:
            await client.sign_in(phone, code)
        except errors.SessionPasswordNeededError:
            password = Write.Input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç 2fa: ", Colors.black_to_green, interval=0.0001)
            await client.sign_in(password=password)
    
    Write.Print(f"–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ {session_name}.session", Colors.black_to_green, interval=0.0001)
    await client.disconnect()
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é...")

async def auto_click_links(session_name):
    client = TelegramClient(session_name, api_id, api_hash)
    
    try:
        await client.connect()
        if not await client.is_user_authorized():
            Write.Print(f"–°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.\n", Colors.black_to_green, interval=0.0001)
            await client.disconnect()
            return
        
        dialogs = await client.get_dialogs()
        if '@send' not in [dialog.name for dialog in dialogs]:
            await client.send_message('send', '/start')
            Write.Print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –±–æ—Ç—É @send –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}\n", Colors.black_to_green, interval=0.0001)
        
        @client.on(events.NewMessage(incoming=True, pattern=r'http://t\.me/send\?start=.*'))
        async def handler(event):
            link = event.message.message
            Write.Print(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_name}: {link}\n", Colors.black_to_green, interval=0.0001)
            start_param = link.split('=')[1]
            await client.send_message('send', f'/start {start_param}')
            Write.Print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start {start_param} –±–æ—Ç—É @send –≤ —Å–µ—Å—Å–∏–∏ {session_name}\n", Colors.black_to_green, interval=0.0001)
        
        @client.on(events.NewMessage(incoming=True, from_users='send'))
        async def bot_response_handler(event):
            if '–í—ã –ø–æ–ª—É—á–∏–ª–∏' in event.message.message:
                match = re.search(r'–í—ã –ø–æ–ª—É—á–∏–ª–∏ ü™ô ([\d.]+) (USDT) \(([\d.]+) RUB\)', event.message.message)
                if match:
                    amount_crypto = match.group(1)
                    crypto_type = match.group(2)
                    amount_rub = match.group(3)
                    Write.Print(f"–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_name}, –ø–æ–ª—É—á–∏–ª–∏ {amount_crypto} {crypto_type} ({amount_rub} RUB)\n", Colors.black_to_green, interval=0.0001)
                else:
                    Write.Print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –≤ —Å–µ—Å—Å–∏–∏ {session_name}\n", Colors.black_to_green, interval=0.0001)
            elif '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç —á–µ–∫–∞' in event.message.message:
                Write.Print(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_name}: —á–µ–∫ –ø–æ–¥ –ø–∞—Ä–æ–ª–µ–º\n", Colors.black_to_red, interval=0.0001)
            elif '–≠—Ç–æ—Ç —á–µ–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' in event.message.message:
                Write.Print(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_name}: —á–µ–∫ –æ–∫–∞–∑–∞–ª—Å—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω\n", Colors.black_to_red, interval=0.0001)
            else:
                Write.Print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ {session_name}: {event.message.message}\n", Colors.black_to_red, interval=0.0001)
        
        await client.run_until_disconnected()
    except Exception as e:
        Write.Print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏ {session_name}: {e}\n", Colors.black_to_red, interval=0.0001)
    finally:
        await client.disconnect()

async def main_async():
    while True:
        clear_screen()
        Write.Print(gog, Colors.black_to_green, interval=0.0001)        
        Write.Print("\n  –ú–µ–Ω—é:", Colors.black_to_green, interval=0.0001)
        Write.Print("\n  1. –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç", Colors.black_to_green, interval=0.0001)
        Write.Print("\n  2. –ê–≤—Ç–æ –∫—Ä–∏–ø—Ç–∞", Colors.black_to_green, interval=0.0001)
        Write.Print("\n  3. –í—ã—Ö–æ–¥", Colors.black_to_green, interval=0.0001)
        choice = Write.Input("\n  –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ", Colors.black_to_green, interval=0.0001)
        
        if choice == '1':
            await create_account()
        elif choice == '2':
            session_files = [f for f in os.listdir() if f.endswith('.session')]
            if not session_files:
                Write.Print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Å—Å–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–∞—á–∞–ª–∞.\n", Colors.black_to_green, interval=0.0001)
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é...")
                continue
            
            tasks = [auto_click_links(session_file.replace('.session', '')) for session_file in session_files]
            await asyncio.gather(*tasks)
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é...")
        elif choice == '3':
            break
        else:
            Write.Print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", Colors.black_to_green, interval=0.0001)

def main():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main_async())

if __name__ == "__main__":
    main()